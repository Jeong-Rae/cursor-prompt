---
description: 
globs: 
alwaysApply: true
---
<ReactDevelopRules>
  <CodeSeparation>
    같이 실행되지 않는 코드는 분리한다.
  </CodeSeparation>

  <ImplementationAbstraction>
    <Purpose>
      로직을 Wrapper 컴포넌트로 분리하여, 코드를 읽는 사람이 한 번에 알아야 하는 맥락을 줄이고 가독성을 높인다.
    </Purpose>
    <AvoidInternalReference>
      분리된 컴포넌트 안에 있는 로직끼리 서로 참조하지 않도록 하여 불필요한 의존 관계를 방지한다.
    </AvoidInternalReference>
  </ImplementationAbstraction>

  <DeclarativeCode>
    <HighLevel>
      높은 수준의 선언적인 코드를 작성한다.
    </HighLevel>
  </DeclarativeCode>

  <FunctionSeparation>
    <SplitByLogic>
      쿼리 파라미터, 상태, API 호출과 같은 로직의 종류에 따라 함수를 쪼갠다.
    </SplitByLogic>
    <AvoidOverloadedFunctions>
      다양한 종류의 맥락을 한 함수나 컴포넌트에서 다루지 않는다.
    </AvoidOverloadedFunctions>
  </FunctionSeparation>

  <Naming>
    <ComplexConditions>
      복잡한 조건에는 이름을 붙인다.
    </ComplexConditions>
    <MagicNumbers>
      매직 넘버에는 이름을 붙인다.
    </MagicNumbers>
  </Naming>

  <Readability>
    <TopDown>
      코드를 위에서 아래로 읽히게 작성한다.
    </TopDown>
    <Ternary>
      삼항 연산자는 단순하게 사용한다.
    </Ternary>
  </Readability>

  <PropsDrilling>
    <Avoid>
      불필요한 Props Drilling을 피한다.
    </Avoid>
    <MeaningfulOnly>
      props는 해당 컴포넌트에게 의미 있는 정보만 전달한다.
    </MeaningfulOnly>
    <CompositionPattern>
      Composition 패턴을 활용하여 Props Drilling을 줄인다.
    </CompositionPattern>
    <UseContext>
      건너뛰어야 하는 상황에서는 context API를 사용한다.
    </UseContext>
  </PropsDrilling>

  <Abstraction>
    <AvoidOverAbstraction>
      추상화된 로직이 지나치게 복잡하거나 강결합인 경우 추상화를 피한다.
    </AvoidOverAbstraction>
    <Purpose>
      추상화는 약한 결합을 통해 수정을 용이하게 하기 위한 것이다.
    </Purpose>
  </Ab
